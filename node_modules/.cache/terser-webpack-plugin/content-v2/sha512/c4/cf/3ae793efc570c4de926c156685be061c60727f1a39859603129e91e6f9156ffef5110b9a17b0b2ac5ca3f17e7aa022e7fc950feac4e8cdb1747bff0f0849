{"map":"{\"version\":3,\"sources\":[\"/Users/luke.steiner/Downloads/Projects/stencil-cli/cornerstone/assets/js/theme/common/models/forms.js\",\"/Users/luke.steiner/Downloads/Projects/stencil-cli/cornerstone/assets/js/theme/common/gift-certificate-validator.js\",\"/Users/luke.steiner/Downloads/Projects/stencil-cli/cornerstone/assets/js/theme/gift-certificate.js\"],\"names\":[\"forms\",\"email\",\"value\",\"test\",\"password\",\"this\",\"notEmpty\",\"length\",\"__webpack_exports__\",\"cert\",\"GiftCertificate\",\"context\",\"_this\",\"_PageManager\",\"call\",\"$certBalanceForm\",\"$\",\"purchaseModel\",\"val\",\"formModel\",\"apply\",\"arguments\",\"$purchaseForm\",\"$customAmounts\",\"find\",\"purchaseValidator\",\"nod\",\"submit\",\"delay\",\"$element\",\"min\",\"data\",\"minFormatted\",\"max\",\"maxFormatted\",\"add\",\"selector\",\"validate\",\"cb\",\"numberVal\",\"Number\",\"errorMessage\",\"toName\",\"toEmail\",\"fromName\",\"fromEmail\",\"triggeredBy\",\"certTheme\",\"get\",\"checked\",\"agreeToTerms\",\"balanceVal\",\"checkCertBalanceValidator\",\"on\",\"performCheck\",\"areAll\",\"event\",\"preventDefault\",\"click\",\"modal\",\"defaultModal\",\"previewUrl\",\"currentTarget\",\"serialize\",\"open\",\"api\",\"getPage\",\"err\",\"content\",\"updateContent\",\"previewError\",\"wrap\",\"$balanceForm\",\"balanceValidator\",\"giftCertChecker\",\"PageManager\"],\"mappings\":\"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\",\"sourcesContent\":[\"const forms = {\\n    email(value) {\\n        const re = /^.+@.+\\\\..+/;\\n        return re.test(value);\\n    },\\n\\n    /**\\n     * Validates a password field\\n     * @param value\\n     * @returns {boolean}\\n     */\\n    password(value) {\\n        return this.notEmpty(value);\\n    },\\n\\n    /**\\n     * validates if a field is empty\\n     * @param value\\n     * @returns {boolean}\\n     *\\n     */\\n    notEmpty(value) {\\n        return value.length > 0;\\n    },\\n};\\n\\nexport default forms;\\n\",\"export default function (cert) {\\n    if (typeof cert !== 'string') {\\n        return false;\\n    }\\n\\n    // Add any custom gift certificate validation logic here\\n    return true;\\n}\\n\",\"import PageManager from './page-manager';\\nimport nod from './common/nod';\\nimport giftCertChecker from './common/gift-certificate-validator';\\nimport formModel from './common/models/forms';\\nimport { api } from '@bigcommerce/stencil-utils';\\nimport { defaultModal } from './global/modal';\\n\\nexport default class GiftCertificate extends PageManager {\\n    constructor(context) {\\n        super(context);\\n\\n        const $certBalanceForm = $('#gift-certificate-balance');\\n\\n        const purchaseModel = {\\n            recipientName(val) {\\n                return val.length;\\n            },\\n            recipientEmail(...args) {\\n                return formModel.email(...args);\\n            },\\n            senderName(val) {\\n                return val.length;\\n            },\\n            senderEmail(...args) {\\n                return formModel.email(...args);\\n            },\\n            customAmount(value, min, max) {\\n                return value && value >= min && value <= max;\\n            },\\n            setAmount(value, options) {\\n                let found = false;\\n\\n                options.forEach((option) => {\\n                    if (option === value) {\\n                        found = true;\\n                        return false;\\n                    }\\n                });\\n\\n                return found;\\n            },\\n        };\\n\\n        const $purchaseForm = $('#gift-certificate-form');\\n        const $customAmounts = $purchaseForm.find('input[name=\\\"certificate_amount\\\"]');\\n        const purchaseValidator = nod({\\n            submit: '#gift-certificate-form input[type=\\\"submit\\\"]',\\n            delay: 300,\\n        });\\n\\n        if ($customAmounts.length) {\\n            const $element = $purchaseForm.find('input[name=\\\"certificate_amount\\\"]');\\n            const min = $element.data('min');\\n            const minFormatted = $element.data('minFormatted');\\n            const max = $element.data('max');\\n            const maxFormatted = $element.data('maxFormatted');\\n\\n            purchaseValidator.add({\\n                selector: '#gift-certificate-form input[name=\\\"certificate_amount\\\"]',\\n                validate: (cb, val) => {\\n                    const numberVal = Number(val);\\n\\n                    if (!numberVal) {\\n                        cb(false);\\n                    }\\n\\n                    cb(numberVal >= min && numberVal <= max);\\n                },\\n                errorMessage: `You must enter a certificate amount between ${minFormatted} and ${maxFormatted}.`,\\n            });\\n        }\\n\\n        purchaseValidator.add([\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"to_name\\\"]',\\n                validate: (cb, val) => {\\n                    const result = purchaseModel.recipientName(val);\\n\\n                    cb(result);\\n                },\\n                errorMessage: this.context.toName,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"to_email\\\"]',\\n                validate: (cb, val) => {\\n                    const result = purchaseModel.recipientEmail(val);\\n\\n                    cb(result);\\n                },\\n                errorMessage: this.context.toEmail,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"from_name\\\"]',\\n                validate: (cb, val) => {\\n                    const result = purchaseModel.senderName(val);\\n\\n                    cb(result);\\n                },\\n                errorMessage: this.context.fromName,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"from_email\\\"]',\\n                validate: (cb, val) => {\\n                    const result = purchaseModel.senderEmail(val);\\n\\n                    cb(result);\\n                },\\n                errorMessage: this.context.fromEmail,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"certificate_theme\\\"]:first-of-type',\\n                triggeredBy: '#gift-certificate-form input[name=\\\"certificate_theme\\\"]',\\n                validate: (cb) => {\\n                    const val = $purchaseForm.find('input[name=\\\"certificate_theme\\\"]:checked').val();\\n\\n                    cb(typeof (val) === 'string');\\n                },\\n                errorMessage: this.context.certTheme,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"agree\\\"]',\\n                validate: (cb) => {\\n                    const val = $purchaseForm.find('input[name=\\\"agree\\\"]').get(0).checked;\\n\\n                    cb(val);\\n                },\\n                errorMessage: this.context.agreeToTerms,\\n            },\\n            {\\n                selector: '#gift-certificate-form input[name=\\\"agree2\\\"]',\\n                validate: (cb) => {\\n                    const val = $purchaseForm.find('input[name=\\\"agree2\\\"]').get(0).checked;\\n\\n                    cb(val);\\n                },\\n                errorMessage: this.context.agreeToTerms,\\n            },\\n        ]);\\n\\n        if ($certBalanceForm.length) {\\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\\n\\n            $certBalanceForm.on('submit', () => {\\n                balanceVal.performCheck();\\n\\n                if (!balanceVal.areAll('valid')) {\\n                    return false;\\n                }\\n            });\\n        }\\n\\n        $purchaseForm.on('submit', event => {\\n            purchaseValidator.performCheck();\\n\\n            if (!purchaseValidator.areAll('valid')) {\\n                return event.preventDefault();\\n            }\\n        });\\n\\n        $('#gift-certificate-preview').click(event => {\\n            event.preventDefault();\\n\\n            purchaseValidator.performCheck();\\n\\n            if (!purchaseValidator.areAll('valid')) {\\n                return;\\n            }\\n\\n            const modal = defaultModal();\\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\\n\\n            modal.open();\\n\\n            api.getPage(previewUrl, {}, (err, content) => {\\n                if (err) {\\n                    return modal.updateContent(this.context.previewError);\\n                }\\n\\n                modal.updateContent(content, { wrap: true });\\n            });\\n        });\\n    }\\n\\n    checkCertBalanceValidator($balanceForm) {\\n        const balanceValidator = nod({\\n            submit: $balanceForm.find('input[type=\\\"submit\\\"]'),\\n        });\\n\\n        balanceValidator.add({\\n            selector: $balanceForm.find('input[name=\\\"giftcertificatecode\\\"]'),\\n            validate(cb, val) {\\n                cb(giftCertChecker(val));\\n            },\\n            errorMessage: 'You must enter a certificate code.',\\n        });\\n\\n        return balanceValidator;\\n    }\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{245:function(e,t,r){\"use strict\";t.a={email:function(e){return/^.+@.+\\..+/.test(e)},password:function(e){return this.notEmpty(e)},notEmpty:function(e){return e.length>0}}},288:function(e,t,r){\"use strict\";t.a=function(e){return\"string\"==typeof e}},85:function(e,t,r){\"use strict\";r.r(t),function(e){r.d(t,\"default\",function(){return u});r(137),r(11);var i=r(41),a=r(74),n=r(288),c=r(245),o=r(1),f=r(12);var u=function(t){var r,i;function u(r){var i;i=t.call(this,r)||this;var n=e(\"#gift-certificate-balance\"),u=function(e){return e.length},m=function(){return c.a.email.apply(c.a,arguments)},l=function(e){return e.length},s=function(){return c.a.email.apply(c.a,arguments)},p=e(\"#gift-certificate-form\"),d=p.find('input[name=\"certificate_amount\"]'),g=Object(a.a)({submit:'#gift-certificate-form input[type=\"submit\"]',delay:300});if(d.length){var v=p.find('input[name=\"certificate_amount\"]'),h=v.data(\"min\"),b=v.data(\"minFormatted\"),y=v.data(\"max\"),_=v.data(\"maxFormatted\");g.add({selector:'#gift-certificate-form input[name=\"certificate_amount\"]',validate:function(e,t){var r=Number(t);r||e(!1),e(r>=h&&r<=y)},errorMessage:\"You must enter a certificate amount between \"+b+\" and \"+_+\".\"})}if(g.add([{selector:'#gift-certificate-form input[name=\"to_name\"]',validate:function(e,t){e(u(t))},errorMessage:i.context.toName},{selector:'#gift-certificate-form input[name=\"to_email\"]',validate:function(e,t){e(m(t))},errorMessage:i.context.toEmail},{selector:'#gift-certificate-form input[name=\"from_name\"]',validate:function(e,t){e(l(t))},errorMessage:i.context.fromName},{selector:'#gift-certificate-form input[name=\"from_email\"]',validate:function(e,t){e(s(t))},errorMessage:i.context.fromEmail},{selector:'#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',triggeredBy:'#gift-certificate-form input[name=\"certificate_theme\"]',validate:function(e){e(\"string\"==typeof p.find('input[name=\"certificate_theme\"]:checked').val())},errorMessage:i.context.certTheme},{selector:'#gift-certificate-form input[name=\"agree\"]',validate:function(e){e(p.find('input[name=\"agree\"]').get(0).checked)},errorMessage:i.context.agreeToTerms},{selector:'#gift-certificate-form input[name=\"agree2\"]',validate:function(e){e(p.find('input[name=\"agree2\"]').get(0).checked)},errorMessage:i.context.agreeToTerms}]),n.length){var w=i.checkCertBalanceValidator(n);n.on(\"submit\",function(){if(w.performCheck(),!w.areAll(\"valid\"))return!1})}return p.on(\"submit\",function(e){if(g.performCheck(),!g.areAll(\"valid\"))return e.preventDefault()}),e(\"#gift-certificate-preview\").click(function(t){if(t.preventDefault(),g.performCheck(),g.areAll(\"valid\")){var r=Object(f.b)(),a=e(t.currentTarget).data(\"previewUrl\")+\"&\"+p.serialize();r.open(),o.a.getPage(a,{},function(e,t){if(e)return r.updateContent(i.context.previewError);r.updateContent(t,{wrap:!0})})}}),i}return i=t,(r=u).prototype=Object.create(i.prototype),r.prototype.constructor=r,r.__proto__=i,u.prototype.checkCertBalanceValidator=function(e){var t=Object(a.a)({submit:e.find('input[type=\"submit\"]')});return t.add({selector:e.find('input[name=\"giftcertificatecode\"]'),validate:function(e,t){e(Object(n.a)(t))},errorMessage:\"You must enter a certificate code.\"}),t},u}(i.a)}.call(this,r(0))}}]);","extractedComments":[]}